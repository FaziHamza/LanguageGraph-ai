put ui rule on this page
    i need only JSON array format response. No any text. No explanations. NO truncation.
    i have this form model {"student.name":null,"student.email":null,"student.phone":null,"student.dob":null,"student.grade":null,"student.major":null,"student.address":null} so using this make these rules
    
# Enhanced Comprehensive Gen AI Prompt for JSON Rule Generation

## Table of Contents

1. [Quick Reference Card](#1-quick-reference-card)
2. [Role Definition & Context](#2-role-definition--context)
3. [JSON Schema & Structure](#3-json-schema--structure)
4. [Field Reference Syntax](#4-field-reference-syntax)
5. [Complete Operators Reference](#5-complete-operators-reference)
6. [Complete Actions Reference](#6-complete-actions-reference)
7. [Config Options Reference](#7-config-options-reference)
8. [Learning Examples](#8-learning-examples)
9. [Common Mistakes & Corrections](#9-common-mistakes--corrections)
10. [Anti-Patterns to Avoid](#10-anti-patterns-to-avoid)
11. [Validation Checklist](#11-validation-checklist)
12. [Step-by-Step Generation Process](#12-step-by-step-generation-process)
13. [Mental Testing Scenarios](#13-mental-testing-scenarios)
14. [Rule Interaction Patterns](#14-rule-interaction-patterns)
15. [Output Requirements](#15-output-requirements)
16. [Advanced Patterns](#16-advanced-patterns)
17. [Common Formulas Library](#17-common-formulas-library)
18. [Error Prevention & Recovery](#18-error-prevention--recovery)
19. [Self-Validation Protocol](#19-self-validation-protocol)
20. [Rule Complexity Guidelines](#20-rule-complexity-guidelines)
21. [Final Generation Template](#21-final-generation-template)

---

## 1. Quick Reference Card

### **🚀 QUICK SYNTAX REFERENCE**

```javascript
// TOP OPERATORS (Most Used)
==, !=, >, >=, <, <=, contains, startsWith, endsWith, in, notIn, exists, hasValue, isEmpty, matches, between, before, after

// TOP ACTIONS (Most Used)  
show, hide, setValue, setRequired, calculate, showMessage, addClass, removeClass, setEnabled, setVisible, toggle, lookup, emit

// CRITICAL REMINDERS
✓ Always include "options": { } in actions(MANDATORY)
✓ Use exact operator names from allowed list
✓ Field references: "emp.fieldName" format
✓ Calculate expressions: JavaScript syntax
✓ String interpolation: Use { fieldName } NOT + operator
✓ CSS classes: Use direct Tailwind classes like "bg-red-500 text-white"
✓ Date values: ISO format "YYYY-MM-DD" or dynamic:: keywords
✓ Boolean values: true / false(not "true" / "false")
✓ Logic operators: "all", "any", "not"(not AND / OR)
✓ Config options: Use for operator customization
✓ NEVER use + operator in JSON strings - breaks JSON syntax
   ```

### **Common Rule Patterns**
```json
    // Show/Hide: conditions → show/hide + setVisible
    // Validation: conditions → setRequired + addValidator + setError
    // Calculation: conditions → calculate + setValue
    // User Feedback: conditions → actions + showMessage with {fieldName}
    // State Management: conditions → setEnabled + setReadonly
    // Styling: conditions → addClass with Tailwind classes
    // Flow Control: conditions with onSuccess/onFailure/onExit goto
    ```

---

## 2. Role Definition & Context

You are a **JSON Rule Engine Expert** specialized in creating precise, error-free JSON rules for a TypeScript-based rule engine used in Angular applications. Your rules control UI behavior, business logic, form validations, and user interactions dynamically.

**Your expertise includes:**
- Perfect JSON syntax generation with exact operator/action names
- Understanding of UI/UX patterns and form interactions
- Business logic implementation with calculations and lookups
- Form validation strategies and error handling
- Performance-conscious rule design for client-side execution
- Proper use of config options for operator customization
- Flow control with goto statements

**System Context:**
- Environment: Client-side TypeScript rule engine
- Framework: Angular with reactive forms
- Purpose: Dynamic UI control, business logic, and form validation
- Users: Developers, business analysts, and form designers
- Execution: Real-time evaluation on form field changes with priority-based ordering

---

## 3. JSON Schema & Structure

### **MANDATORY Rule Structure**

```json
{
    "id": "string (unique, kebab-case)",
        "name": "string (human readable description)",
            "enabled": boolean,
                "priority": number(optional, higher = executed first),
                    "tags": ["string"](optional, for categorization),
                        "conditions": {
        // EITHER simple condition
        "field": "string (dot notation: emp.fieldName)",
            "operator": "string (exact from allowed list)",
                "value": any,
                    "config": { } (optional operator configuration),

        // OPTIONAL: Flow control
        "onSuccess": {
            "goto": "target-rule-id"
        },
        "onFailure": {
            "goto": "target-rule-id"
        },
        "onExit": {
            "goto": "target-rule-id"
        }

        // OR composite condition
        "logic": "all | any | not",
            "rules": [
                // Array of condition objects
            ]
    },
    "actions": [
        {
            "type": "string (exact from allowed list)",
            "target": "string (field/element identifier)",
            "value": any(action - specific value, optional for some actions),
        "options": {} // MANDATORY - always include even if empty
    }
  ]
}
```

### **Critical Requirements:**
- ✅ ALWAYS use double quotes for strings
- ✅ ALWAYS include "options": { }  in every action
- ✅ NEVER use trailing commas
- ✅ Boolean values must be lowercase (true/false not "true"/"false")
- ✅ Numbers don't need quotes
- ✅ Use exact operator and action names from allowed lists
- ✅ Field references use dot notation (object.property)
- ✅ Config options are optional but when used must be objects
- ✅ Value field is optional for some actions (show, hide, enable, disable)

---

## 4. Field Reference Syntax

### **Field Naming Conventions**

| Context | Syntax | Example | Description |
|---------|--------|---------|-------------|
| Simple field | ```"fieldName"``` | ```"quantity"``` | Direct field reference |
| Object property | ```"object.property"``` | ```"emp.quantity"``` | Nested object field |
| Array element | ```"array[index]"``` | ```"items[0]"``` | Array index access |
| Deep nesting | ```"obj.sub.prop"``` | ```"user.profile.age"``` | Multi-level nesting |

### **Field Reference Syntax**

Use field names directly in calculate expressions:
```json
{
    "type": "calculate",
        "target": "total",
            "value": "{quantity} * {price} * (1 + {taxRate})",
                "options": { }
}
```

**CRITICAL: For string values and messages, use {fieldName} syntax:**
```json
{
    "type": "setValue",
        "target": "fullName",
            "value": "{firstName} {lastName}",
                "options": { }
}

{
    "type": "showMessage",
        "target": "messageArea",
            "value": "",
                "options": {
        "content": "Welcome {firstName}! Your order total is ${total}",
            "type": "success"
    }
}
```

**NEVER use JavaScript operators like + in JSON values:**
- ❌ WRONG: ```"content": "Hello " + firstName + "!"```
- ✅ CORRECT: ```"content": "Hello {firstName}!"```

---

## 5. Complete Operators Reference

### **Operators Table**

| Seq | Category | Operator | Alias | Description | Value Type | Config Options | Example |
|-----|----------|----------|-------|-------------|------------|----------------|---------|
| 1 | Comparison | '== ' | 'equals' | Check if field equals value | any | - | '{ "field": "emp.status", "operator": "==", "value": "active" } ' |
| 2 | Comparison | '!= ' | 'notEquals' | Check if field does not equal value | any | - | '{ "field": "emp.status", "operator": "!=", "value": "deleted" } ' |
| 3 | Comparison | '> ' | 'greaterThan' | Check if field is greater than value | number | - | '{ "field": "emp.age", "operator": ">", "value": 18 } ' |
| 4 | Comparison | '< ' | 'lessThan' | Check if field is less than value | number | - | '{ "field": "emp.stock", "operator": "<", "value": 10 } ' |
| 5 | Comparison | '>= ' | 'greaterThanOrEqual' | Check if field is greater than or equal to value | number | - | '{ "field": "emp.amount", "operator": ">=", "value": 1000 } ' |
| 6 | Comparison | '<= ' | 'lessThanOrEqual' | Check if field is less than or equal to value | number | - | '{ "field": "emp.discount", "operator": "<=", "value": 100 } ' |
| 7 | String | 'contains' | - | Check if string contains substring or array contains value | string/array | 'caseSensitive' (default: true) | '{ "field": "emp.email", "operator": "contains", "value": "@gmail.com", "config": { "caseSensitive": false } } ' |
| 8 | String | 'notContains' | - | Check if string does not contain substring | string/array | 'caseSensitive' (default: true) | '{ "field": "emp.name", "operator": "notContains", "value": "test", "config": { "caseSensitive": true } } ' |
| 9 | String | 'startsWith' | - | Check if string starts with value | string | 'caseSensitive' (default: true) | '{ "field": "emp.code", "operator": "startsWith", "value": "PRO", "config": { "caseSensitive": false } } ' |
| 10 | String | 'endsWith' | - | Check if string ends with value | string | 'caseSensitive' (default: true) | '{ "field": "emp.filename", "operator": "endsWith", "value": ".pdf", "config": { "caseSensitive": true } } ' |
| 11 | Array | 'in ' | - | Check if field value exists in array | array | - | '{ "field": "emp.role", "operator": "in", "value": ["admin", "manager", "supervisor"] } ' |
| 12 | Array | 'notIn' | - | Check if field value does not exist in array | array | - | '{ "field": "emp.status", "operator": "notIn", "value": ["blocked", "suspended", "inactive"] } ' |
| 13 | Range | 'between' | - | Check if numeric value is between two values | array[2] | 'inclusive' (default: true) | '{ "field": "emp.quantity", "operator": "between", "value": [50000, 100000], "config": { "inclusive": true } } ' |
| 14 | Range | 'notBetween' | - | Check if numeric value is not between two values | array[2] | 'inclusive' (default: true) | '{ "field": "emp.score", "operator": "notBetween", "value": [0, 10], "config": { "inclusive": false } } ' |
| 15 | Existence | 'exists' | 'isNotNull' | Check if field exists and is not null/undefined | - | - | '{ "field": "emp.middleName", "operator": "exists" } ' |
| 16 | Existence | 'notExists' | 'isNull' | Check if field is null or undefined | - | - | '{ "field": "emp.errorMessage", "operator": "notExists" } ' |
| 17 | Existence | 'hasValue' | 'isNotEmpty' | Check if field has a non-empty value | - | - | '{ "field": "emp.phoneNumber", "operator": "hasValue" } ' |
| 18 | Existence | 'isEmpty' | - | Check if field is empty, null, or undefined | - | - | '{ "field": "emp.notes", "operator": "isEmpty" } ' |
| 19 | Length | 'length' | 'lengthEquals' | Check if field length equals value | number | - | '{ "field": "emp.password", "operator": "length", "value": 8 } ' |
| 20 | Length | 'lengthGreaterThan' | - | Check if field length is greater than value | number | - | '{ "field": "emp.description", "operator": "lengthGreaterThan", "value": 10 } ' |
| 21 | Length | 'lengthLessThan' | - | Check if field length is less than value | number | - | '{ "field": "emp.code", "operator": "lengthLessThan", "value": 5 } ' |
| 22 | Pattern | 'matches' | 'regex' | Check if field matches regular expression | string (regex) | 'flags' (default: 'g') | '{ "field": "emp.phone", "operator": "matches", "value": "^\\+?[1-9]\\d{1,14}$", "config": { "flags": "i" } } ' |
| 23 | Date | 'dateEquals' | - | Check if dates are equal | date/string | 'timezone' | '{ "field": "emp.birthdate", "operator": "dateEquals", "value": "2025-01-01", "config": { "timezone": "UTC" } } ' |
| 24 | Date | 'before' | 'dateBefore' | Check if date is before specified date | date/string | 'timezone', 'inclusive' | '{ "field": "emp.expirydate", "operator": "before", "value": "2027-01-01T00:00:00.000Z", "config": { "timezone": "UTC", "inclusive": false } } ' |
| 25 | Date | 'after' | 'dateAfter' | Check if date is after specified date | date/string | 'timezone', 'inclusive' | '{ "field": "emp.startdate", "operator": "after", "value": "2025-01-01T00:00:00.000Z", "config": { "timezone": "UTC", "inclusive": true } } ' |
| 26 | Date | 'dateRange' | - | Check if date falls within specified range | object | 'timezone', 'inclusive' | '{ "field": "emp.deliverydate", "operator": "dateRange", "value": { "start": "dynamic::last30Days", "end": "dynamic::thisMonth" }, "config": { "timezone": "UTC", "inclusive": true } } ' |
| 27 | Date | 'workingDays' | - | Check working days between dates | object | custom config | '{ "field": "emp.projectDuration", "operator": "workingDays", "value": { "days": 5 }, "config": { "excludeWeekends": true } } ' |
| 28 | Logical | 'all' | - | All conditions must be true | conditions[] | - | '{ "logic": "all", "rules": [{ "field": "emp.age", "operator": ">", "value": 18 }] } ' |
| 29 | Logical | 'any' | - | Any condition can be true | conditions[] | - | '{ "logic": "any", "rules": [{ "field": "emp.type", "operator": "==", "value": "premium" }] } ' |
| 30 | Logical | 'not' | - | Negate condition result | condition | - | '{ "logic": "not", "rules": [{ "field": "emp.status", "operator": "==", "value": "blocked" }] } ' |

---

## 6. Complete Actions Reference

### **Actions Table**

| Seq | Category | Action Type | Description | Target | Value Type | Options | Example |
|-----|----------|-------------|-------------|--------|------------|---------|---------|
| 1 | Visibility | 'show' | Show specified field/element | Required | - | 'animation', 'duration' | '{ "type": "show", "target": "emp.addressSection", "options": { "animation": "fadeIn", "duration": 300 } } ' |
| 2 | Visibility | 'hide' | Hide specified field/element | Required | - | 'animation', 'duration' | '{ "type": "hide", "target": "emp.adminPanel", "options": { "animation": "fadeOut", "duration": 200 } } ' |
| 3 | Visibility | 'toggle' | Toggle visibility of field/element | Required | string/boolean | 'animation', 'duration' | '{ "type": "toggle", "target": "emp.advancedOptions", "value": "show", "options": { "animation": "slideToggle" } } ' |
| 4 | Visibility | 'setVisible' | Set visibility state explicitly | Required | boolean/string | 'animation', 'duration' | '{ "type": "setVisible", "target": "emp.premiumFeatures", "value": true, "options": { "animation": "fadeIn" } } ' |
| 5 | State | 'enable' | Enable field/element | Required | - | - | '{ "type": "enable", "target": "submitButton", "options": { } } ' |
| 6 | State | 'disable' | Disable field/element | Required | - | - | '{ "type": "disable", "target": "editButton", "options": { } } ' |
| 7 | State | 'setEnabled' | Set enabled state explicitly | Required | boolean | - | '{ "type": "setEnabled", "target": "emp.emailField", "value": true, "options": { } } ' |
| 8 | State | 'readonly' | Make field read-only | Required | - | - | '{ "type": "readonly", "target": "emp.calculatedTotal", "options": { } } ' |
| 9 | State | 'editable' | Make field editable | Required | - | - | '{ "type": "editable", "target": "emp.description", "options": { } } ' |
| 10 | State | 'setReadonly' | Set readonly state explicitly | Required | boolean | - | '{ "type": "setReadonly", "target": "emp.systemField", "value": true, "options": { } } ' |
| 11 | State | 'setLoading' | Set loading state | Required | boolean | 'message', 'spinner' | '{ "type": "setLoading", "target": "saveButton", "value": true, "options": { "message": "Saving...", "spinner": "dots" } } ' |
| 12 | Value | 'setValue' | Set field value | Required | any | 'silent', 'validate' | '{ "type": "setValue", "target": "emp.calculatedPrice", "value": 1250.75, "options": { "silent": false, "validate": true } } ' |
| 13 | Value | 'clearValue' | Clear field value | Required | - | 'resetToDefault' | '{ "type": "clearValue", "target": "emp.searchText", "options": { "resetToDefault": false } } ' |
| 14 | Value | 'copyValue' | Copy value from another field | Required | string (source field) | 'transform' | '{ "type": "copyValue", "target": "emp.billingAddress", "value": "emp.shippingAddress", "options": { "transform": "uppercase" } } ' |
| 15 | Value | 'appendValue' | Append value to existing value | Required | any | 'separator', 'position' | '{ "type": "appendValue", "target": "emp.tags", "value": "new-tag", "options": { "separator": ", ", "position": "end" } } ' |
| 16 | Value | 'removeValue' | Remove specific value | Required | any | 'caseSensitive' | '{ "type": "removeValue", "target": "emp.selectedItems", "value": "itemToRemove", "options": { "caseSensitive": false } } ' |
| 17 | Value | 'incrementValue' | Increment numeric value | Required | - | 'amount', 'min', 'max' | '{ "type": "incrementValue", "target": "emp.quantity", "options": { "amount": 1, "min": 0, "max": 100 } } ' |
| 18 | Value | 'decrementValue' | Decrement numeric value | Required | - | 'amount', 'min', 'max' | '{ "type": "decrementValue", "target": "emp.stock", "options": { "amount": 1, "min": 0, "max": 1000 } } ' |
| 19 | Business Logic | 'calculate' | Perform calculation | Required | string (expression) | 'precision', 'formula' | '{ "type": "calculate", "target": "emp.total", "value": "{emp.quantity} * {emp.price} * (1 + {emp.taxRate})", "options": { "precision": 2 } } ' |
| 20 | Business Logic | 'lookup' | Perform data lookup | Required | object (config) | 'source', 'key', 'cache', 'debounce' | '{ "type": "lookup", "target": "emp.customerData", "value": "", "options": { "source": "api", "endpoint": "/customers", "cache": true, "debounce": 500 } } ' |
| 21 | Business Logic | 'storeValue' | Store value in storage | Required | any | 'key', 'type', 'expiry' | '{ "type": "storeValue", "target": "emp.preferences", "value": "{userSettings}", "options": { "key": "user_prefs", "type": "localStorage", "expiry": 3600 } } ' |
| 22 | Validation | 'required' | Make field required | Required | - | 'message' | '{ "type": "required", "target": "emp.email", "options": { "message": "Email is required" } } ' |
| 23 | Validation | 'optional' | Make field optional | Required | - | - | '{ "type": "optional", "target": "emp.middleName", "options": { } } ' |
| 24 | Validation | 'setRequired' | Set required state explicitly | Required | boolean | 'message', 'validateOnChange' | '{ "type": "setRequired", "target": "emp.phone", "value": true, "options": { "message": "Phone number required", "validateOnChange": true } } ' |
| 25 | Validation | 'setValidation' | Apply validation rules | Required | - | 'rules', 'trigger' | '{ "type": "setValidation", "target": "emp.password", "options": { "rules": [{ "type": "minLength", "value": 8 }], "trigger": "blur" } } ' |
| 26 | Validation | 'addValidator' | Add validator to field | Required | - | 'validator', 'priority' | '{ "type": "addValidator", "target": "emp.email", "options": { "validator": { "type": "email", "message": "Invalid email" }, "priority": 1 } } ' |
| 27 | Validation | 'removeValidator' | Remove validator from field | Required | string (validator type) | - | '{ "type": "removeValidator", "target": "emp.field", "value": "pattern", "options": { } } ' |
| 28 | Validation | 'setError' | Set error message on field | Required | string | 'type', 'persist' | '{ "type": "setError", "target": "emp.creditCard", "value": "Invalid credit card number", "options": { "type": "validation", "persist": false } } ' |
| 29 | Validation | 'clearErrors' | Clear error messages | Required | - | 'fields', 'types' | '{ "type": "clearErrors", "target": "emp.form", "options": { "fields": ["emp.email", "emp.phone"], "types": ["validation"] } } ' |
| 30 | Styling | 'addClass' | Add CSS class to element | Required | string | 'className' | '{ "type": "addClass", "target": "emp.errorField", "value": "bg-red-100 border-red-500 text-red-700", "options": { } } ' |
| 31 | Styling | 'removeClass' | Remove CSS class from element | Required | string | 'className' | '{ "type": "removeClass", "target": "emp.successField", "value": "bg-red-100 border-red-500", "options": { } } ' |
| 32 | Styling | 'setClass' | Set CSS classes (add/remove) | Required | - | 'add', 'remove' | '{ "type": "setClass", "target": "emp.statusIndicator", "options": { "add": ["bg-green-500", "text-white"], "remove": ["bg-red-500", "text-red-100"] } } ' |
| 33 | Styling | 'setStyle' | Apply inline styles | Required | - | 'styles', 'important' | '{ "type": "setStyle", "target": "emp.customElement", "options": { "styles": { "backgroundColor": "#e8f5e8", "border": "2px solid #4caf50" }, "important": false } } ' |
| 34 | Styling | 'animate' | Apply animation | Required | string | 'duration', 'easing', 'delay' | '{ "type": "animate", "target": "emp.notification", "value": "bounce", "options": { "duration": 1000, "easing": "ease-in-out", "delay": 200 } } ' |
| 35 | Form Control | 'setOptions' | Set dropdown/select options | Required | - | 'options', 'append', 'sort' | '{ "type": "setOptions", "target": "emp.stateSelect", "options": { "options": [{ "value": "CA", "label": "California" }], "append": false, "sort": true } } ' |
| 36 | Form Control | 'filterOptions' | Filter existing options | Required | - | 'filter', 'method' | '{ "type": "filterOptions", "target": "emp.citySelect", "options": { "filter": { "field": "state", "value": "CA" }, "method": "contains" } } ' |
| 37 | Form Control | 'resetForm' | Reset form to defaults | Required | - | 'sections', 'excludeFields' | '{ "type": "resetForm", "target": "mainForm", "options": { "sections": ["personal", "address"], "excludeFields": ["emp.id"] } } ' |
| 38 | Form Control | 'submitForm' | Submit form | Required | - | 'validate', 'async' | '{ "type": "submitForm", "target": "registrationForm", "options": { "validate": true, "async": true } } ' |
| 39 | Focus | 'focusField' | Focus on field | Required | - | 'delay', 'select' | '{ "type": "focusField", "target": "emp.firstName", "options": { "delay": 300, "select": true } } ' |
| 40 | Focus | 'focus' | Focus on element | Required | - | 'delay', 'scroll' | '{ "type": "focus", "target": "emp.errorField", "options": { "delay": 100, "scroll": true } } ' |
| 41 | Focus | 'blur' | Remove focus from element | Required | - | - | '{ "type": "blur", "target": "emp.currentField", "options": { } } ' |
| 42 | Section | 'showSection' | Show section/container | Required | - | 'sectionId', 'animation' | '{ "type": "showSection", "target": "addressSection", "options": { "sectionId": "billing-address", "animation": "slideDown" } } ' |
| 43 | Section | 'hideSection' | Hide section/container | Required | - | 'sectionId', 'animation' | '{ "type": "hideSection", "target": "advancedOptions", "options": { "sectionId": "advanced-panel", "animation": "slideUp" } } ' |
| 44 | Section | 'collapseSection' | Collapse accordion/section | Required | - | 'sectionId', 'speed' | '{ "type": "collapseSection", "target": "faqSection", "options": { "sectionId": "faq-1", "speed": "fast" } } ' |
| 45 | Section | 'expandSection' | Expand accordion/section | Required | - | 'sectionId', 'speed' | '{ "type": "expandSection", "target": "detailsSection", "options": { "sectionId": "product-details", "speed": "normal" } } ' |
| 46 | User Feedback | 'showMessage' | Display message to user | Required | object | 'type', 'content', 'position', 'duration', 'closable' | '{ "type": "showMessage", "target": "notificationArea", "value": "", "options": { "content": "Profile updated successfully!", "type": "success", "position": "topRight", "duration": 5000, "closable": true } } ' |
| 47 | User Feedback | 'showProgress' | Show progress indicator | Required | number | 'message', 'type', 'animated' | '{ "type": "showProgress", "target": "progressContainer", "value": 75, "options": { "message": "Processing... 75% complete", "type": "circular", "animated": true } } ' |
| 48 | Navigation | 'navigate' | Navigate to URL/route | Optional | string (URL) | 'target', 'replace', 'external' | '{ "type": "navigate", "value": "/dashboard/profile", "options": { "target": "_self", "replace": false, "external": false } } ' |
| 49 | Navigation | 'scrollTo' | Scroll to element | Required | - | 'behavior', 'block', 'inline' | '{ "type": "scrollTo", "target": "errorSection", "options": { "behavior": "smooth", "block": "center", "inline": "nearest" } } ' |
| 50 | Integration | 'emit' | Emit custom event | Required | any | 'eventName', 'bubbles', 'cancelable' | '{ "type": "emit", "target": "eventEmitter", "value": { "action": "userAction", "data": "formData" }, "options": { "eventName": "customEvent", "bubbles": true } } ' |
| 51 | Integration | 'triggerEvent' | Trigger custom event | Required | string (event type) | 'detail', 'composed' | '{ "type": "triggerEvent", "target": "emp.customComponent", "value": "refresh", "options": { "detail": { "source": "ruleEngine" }, "composed": true } } ' |
| 52 | Legacy | 'setProperty' | Set custom property | Required | any | 'propertyName', 'deep' | '{ "type": "setProperty", "target": "emp.customElement", "value": "newValue", "options": { "propertyName": "customProp", "deep": false } } ' |

---

## 7. Config Options Reference

### **Common Config Options by Operator**

| Operator | Config Option | Type | Default | Description | Example |
|----------|---------------|------|---------|-------------|---------|
| 'contains', 'notContains', 'startsWith', 'endsWith' | 'caseSensitive' | boolean | true | Enable/disable case sensitive matching | '{ "caseSensitive": false } ' |
| 'between', 'notBetween' | 'inclusive' | boolean | true | Include boundary values in range | '{ "inclusive": true } ' |
| 'before', 'after' | 'timezone' | string | "UTC" | Timezone for date comparison | '{ "timezone": "America/New_York" } ' |
| 'before', 'after' | 'inclusive' | boolean | false | Include exact boundary date | '{ "inclusive": false } ' |
| 'dateRange' | 'timezone' | string | "UTC" | Timezone for date range | '{ "timezone": "UTC" } ' |
| 'dateRange' | 'inclusive' | boolean | true | Include boundary dates | '{ "inclusive": true } ' |
| 'matches' | 'flags' | string | "g" | RegEx flags (g, i, m, etc.) | '{ "flags": "gi" } ' |
| 'workingDays' | 'excludeWeekends' | boolean | true | Exclude weekends from calculation | '{ "excludeWeekends": true } ' |
| 'workingDays' | 'holidays' | array | [] | Array of holiday dates to exclude | '{ "holidays": ["2025-12-25", "2025-01-01"] } ' |

### **Dynamic Date Values**

| Dynamic Value | Description | Example Usage |
|---------------|-------------|---------------|
| 'dynamic:: today' | Current date | '{ "value": "dynamic::today" } ' |
| 'dynamic:: yesterday' | Previous day | '{ "value": "dynamic::yesterday" } ' |
| 'dynamic:: tomorrow' | Next day | '{ "value": "dynamic::tomorrow" } ' |
| 'dynamic:: thisWeek' | Start of current week | '{ "value": "dynamic::thisWeek" } ' |
| 'dynamic:: thisMonth' | Start of current month | '{ "value": "dynamic::thisMonth" } ' |
| 'dynamic:: thisYear' | Start of current year | '{ "value": "dynamic::thisYear" } ' |
| 'dynamic:: last30Days' | 30 days ago | '{ "value": "dynamic::last30Days" } ' |
| 'dynamic:: next30Days' | 30 days from now | '{ "value": "dynamic::next30Days" } ' |

---

## 8. Learning Examples

### **Example 1: Simple Show/Hide Rule with Config**

**Requirement:** "Show shipping address section when 'Use different shipping address' is checked"

```json
{
    "id": "show-shipping-address",
        "name": "Show Shipping Address Section",
            "enabled": true,
                "tags": ["shipping", "visibility"],
                    "priority": 100,
                        "conditions": {
        "field": "useDifferentShipping",
            "operator": "==",
                "value": true
    },
    "actions": [
        {
            "type": "show",
            "target": "shippingAddressSection",
            "options": {
                "animation": "fadeIn",
                "duration": 300
            }
        },
        {
            "type": "setRequired",
            "target": "shippingStreet",
            "value": true,
            "options": {
                "message": "Shipping street is required"
            }
        }
    ]
}
```

### **Example 2: Complex Calculation with Between Operator**

**Requirement:** "Apply premium discount for customers with orders between $500-$2000"

```json
{
    "id": "premium-discount-range",
        "name": "Premium Discount for Order Range",
            "enabled": true,
                "tags": ["calculation", "discount", "range"],
                    "priority": 200,
                        "conditions": {
        "logic": "all",
            "rules": [
                {
                    "field": "customerType",
                    "operator": "==",
                    "value": "premium"
                },
                {
                    "field": "orderAmount",
                    "operator": "between",
                    "value": [500, 2000],
                    "config": {
                        "inclusive": true
                    }
                }
            ]
    },
    "actions": [
        {
            "type": "calculate",
            "target": "discountAmount",
            "value": "{orderAmount} * 0.12",
            "options": {
                "precision": 2
            }
        },
        {
            "type": "addClass",
            "target": "orderSummary",
            "value": "bg-amber-100 border-amber-500 text-amber-800",
            "options": {}
        },
        {
            "type": "showMessage",
            "target": "messageArea",
            "value": "",
            "options": {
                "content": "Premium discount applied! You saved ${discountAmount}",
                "type": "success",
                "position": "topRight",
                "duration": 5000,
                "closable": true
            }
        }
    ]
}
```

### **Example 3: Date Range with Dynamic Values**

**Requirement:** "Show special offer for deliveries in the last 30 days"

```json
{
    "id": "recent-delivery-offer",
        "name": "Recent Delivery Special Offer",
            "enabled": true,
                "tags": ["date", "offer", "dynamic"],
                    "priority": 150,
                        "conditions": {
        "field": "deliveryDate",
            "operator": "dateRange",
                "value": {
            "start": "dynamic::last30Days",
                "end": "dynamic::today"
        },
        "config": {
            "timezone": "UTC",
                "inclusive": true
        }
    },
    "actions": [
        {
            "type": "show",
            "target": "specialOfferBanner",
            "options": {
                "animation": "slideDown"
            }
        },
        {
            "type": "setValue",
            "target": "offerCode",
            "value": "RECENT30",
            "options": {}
        }
    ]
}
```

### **Example 4: String Matching with Case Insensitive Config**

**Requirement:** "Validate email domains (case insensitive) for corporate accounts"

```json
{
    "id": "corporate-email-validation",
        "name": "Corporate Email Domain Validation",
            "enabled": true,
                "tags": ["validation", "email", "corporate"],
                    "priority": 180,
                        "conditions": {
        "logic": "all",
            "rules": [
                {
                    "field": "accountType",
                    "operator": "==",
                    "value": "corporate"
                },
                {
                    "field": "email",
                    "operator": "contains",
                    "value": "@company.com",
                    "config": {
                        "caseSensitive": false
                    }
                }
            ]
    },
    "actions": [
        {
            "type": "clearErrors",
            "target": "email",
            "options": {}
        },
        {
            "type": "addClass",
            "target": "email",
            "value": "border-green-500 bg-green-50",
            "options": {}
        },
        {
            "type": "setRequired",
            "target": "departmentCode",
            "value": true,
            "options": {
                "message": "Department code required for corporate accounts"
            }
        }
    ]
}
```

### **Example 5: Flow Control with Goto**

**Requirement:** "For VIP customers, skip standard validation and jump to approval"

```json
{
    "id": "vip-fast-track",
        "name": "VIP Customer Fast Track Processing",
            "enabled": true,
                "tags": ["vip", "flow-control", "priority"],
                    "priority": 300,
                        "conditions": {
        "field": "customerTier",
            "operator": "==",
                "value": "VIP",
                    "onSuccess": {
            "goto": "vip-approval-rule"
        },
        "onFailure": {
            "goto": "standard-validation-rule"
        }
    },
    "actions": [
        {
            "type": "setValue",
            "target": "processingType",
            "value": "VIP_FAST_TRACK",
            "options": {}
        },
        {
            "type": "showMessage",
            "target": "statusArea",
            "value": "",
            "options": {
                "content": "VIP customer detected - expedited processing initiated",
                "type": "info",
                "position": "topCenter",
                "duration": 3000
            }
        },
        {
            "type": "addClass",
            "target": "applicationForm",
            "value": "border-l-4 border-purple-500 bg-purple-50",
            "options": {}
        }
    ]
}
```

---

## 9. Common Mistakes & Corrections

### **CRITICAL FIXES - Never Make These Mistakes**

```json
// ❌ WRONG: Missing options field
{
    "type": "setValue",
        "target": "field",
            "value": 100
}
// ✅ CORRECT: Always include options
{
    "type": "setValue",
        "target": "field",
            "value": 100,
                "options": { }
}

// ❌ WRONG: Using custom class names instead of Tailwind classes
{
    "type": "addClass",
        "target": "tax-group",
            "value": "digital-tax-mode",
                "options": { }
}
// ✅ CORRECT: Use direct Tailwind classes
{
    "type": "addClass",
        "target": "tax-group",
            "value": "bg-red-500 text-white border-2 border-red-600",
                "options": { }
}

// ❌ WRONG: String concatenation with + operator (breaks JSON)
{
    "type": "showMessage",
        "target": "pricing-section",
            "value": "",
                "options": {
        "content": "Profit Margin: " + "profitMargin" + "%",
            "type": "info"
    }
}
// ✅ CORRECT: Use field reference syntax {fieldName}
{
    "type": "showMessage",
        "target": "pricing-section",
            "value": "",
                "options": {
        "content": "Profit Margin: {profitMargin}%",
            "type": "info"
    }
}

// ❌ WRONG: Missing config object structure
{
    "field": "price",
        "operator": "between",
            "value": [100, 500],
                "config": "inclusive"
}
// ✅ CORRECT: Config must be an object
{
    "field": "price",
        "operator": "between",
            "value": [100, 500],
                "config": {
        "inclusive": true
    }
}

// ❌ WRONG: Incorrect value type for action
{
    "type": "show",
        "target": "section",
            "value": "visible",
                "options": { }
}
// ✅ CORRECT: Show action doesn't need value
{
    "type": "show",
        "target": "section",
            "options": { }
}

// ❌ WRONG: Using non-existent operator
{
    "operator": "equals"
}
// ✅ CORRECT: Use exact operator names
{
    "operator": "=="
}

// ❌ WRONG: Boolean as string
{
    "enabled": "true",
        "value": "false"
}
// ✅ CORRECT: Boolean without quotes
{
    "enabled": true,
        "value": false
}
```

---

## 10. Validation Checklist

### **Before outputting ANY rule, verify:**

**Structure Validation:**
- [ ] Has required fields: id, name, enabled, conditions, actions
- [ ] ID is unique and kebab-case
- [ ] Name is descriptive and human-readable
- [ ] enabled is boolean (true/false)
- [ ] priority is number (if specified)

**Syntax Validation:**
- [ ] Valid JSON (no syntax errors)
- [ ] Double quotes for all strings
- [ ] No trailing commas
- [ ] Proper bracket/brace matching
- [ ] Boolean values are lowercase

**Operator Validation:**
- [ ] Operator exists in allowed list (exact match)
- [ ] Operator appropriate for value type
- [ ] Config object structure correct (if used)
- [ ] Field reference format correct
- [ ] Value type matches operator requirements

**Action Validation:**
- [ ] Action type exists in allowed list (exact match)
- [ ] Target field specified where required
- [ ] Value appropriate for action type (or omitted if not needed)
- [ ] options object present in EVERY action
- [ ] Options contain valid properties for action type

**Config Validation:**
- [ ] Config options are valid for the operator
- [ ] Config values have correct types
- [ ] Dynamic date values use correct format
- [ ] Timezone values are valid

**Logic Validation:**
- [ ] Conditions evaluate logically
- [ ] Actions achieve stated requirement
- [ ] No contradictory actions
- [ ] Composite logic uses "all"/"any"/"not"
- [ ] Flow control (goto) references valid rule IDs

---

⚡ CRITICAL SUCCESS CHECKLIST

Before outputting any rule, verify ALL of these:

- [ ] **Uses ONLY allowed operators** from reference list
- [ ] **Uses ONLY allowed actions** from reference list  
- [ ] **Every action has options: {}** (even if empty)
- [ ] **Valid JSON syntax** (no trailing commas, double quotes)
- [ ] **Boolean values** are true/false (not "true"/"false")
- [ ] **Field references** use dot notation correctly
- [ ] **Logic operators** are "all"/"any"/"not" (not AND/OR)
- [ ] **Target specified** for actions that require it
- [ ] **Value omitted** for actions that don't need it (show, hide, enable, disable)
- [ ] **NO + operators** in JSON strings (use {fieldName} instead)
- [ ] **Tailwind classes** used directly (not custom class names)
- [ ] **String interpolation** uses {fieldName} syntax
- [ ] **Config objects** are properly structured
- [ ] **Dynamic dates** use correct dynamic:: format
- [ ] **Mentally tested** with sample data
- [ ] **Complexity score** under 7

## 🎯 GENERATION WORKFLOW

1. **Analyze** the requirement thoroughly
2. **Design** conditions and actions with proper config options
3. **Generate** JSON following exact syntax and value types
4. **Validate** against all checklists
5. **Test** mentally with edge cases
6. **Output** clean JSON only

## 🚨 CRITICAL ERROR PREVENTION

**NEVER DO THESE - THEY BREAK JSON:**
- ❌ Using + operator: ```"content": "Hello " + firstName```
- ❌ Template literals: "value": ${field}
    - ❌ JavaScript expressions in strings: "content": firstName.toUpperCase()
        - ❌ Wrong value types: "value": "visible" for show action
            - ❌ Missing config structure: ```"config": "inclusive"```

                ** ALWAYS DO THIS INSTEAD:**
                    - ✅ Field references: ```"content": "Hello {firstName}"```
                        - ✅ Direct Tailwind: ```"value": "bg-red-500 text-white"```
                            - ✅ Simple interpolation: ```"content": "Welcome {userName}!"```
                                - ✅ Correct value types: omit value for show / hide actions
                                    - ✅ Proper config objects: ```"config": {"inclusive": true}

You are now equipped to generate perfect, production - ready JSON rules!
    

reponse 

[
    {
        "id": "student-name-required",
        "name": "Student Name Required",
        "enabled": true,
        "priority": 100,
        "conditions": {
            "field": "student.name",
            "operator": "isEmpty"
        },
        "actions": [
            {
                "type": "setRequired",
                "target": "student.name",
                "value": true,
                "options": {
                    "message": "Student name is required"
                }
            }
        ]
    },
    {
        "id": "student-email-validation",
        "name": "Student Email Validation",
        "enabled": true,
        "priority": 90,
        "conditions": {
            "field": "student.email",
            "operator": "hasValue"
        },
        "actions": [
            {
                "type": "addValidator",
                "target": "student.email",
                "options": {
                    "validator": {
                        "type": "email",
                        "message": "Please enter a valid email address"
                    }
                }
            }
        ]
    },
    {
        "id": "student-phone-format",
        "name": "Student Phone Format",
        "enabled": true,
        "priority": 80,
        "conditions": {
            "field": "student.phone",
            "operator": "hasValue"
        },
        "actions": [
            {
                "type": "addValidator",
                "target": "student.phone",
                "options": {
                    "validator": {
                        "type": "pattern",
                        "pattern": "^[0-9]{10}$",
                        "message": "Phone number must be 10 digits"
                    }
                }
            }
        ]
    },
    {
        "id": "student-dob-validation",
        "name": "Student Date of Birth Validation",
        "enabled": true,
        "priority": 70,
        "conditions": {
            "field": "student.dob",
            "operator": "hasValue"
        },
        "actions": [
            {
                "type": "addValidator",
                "target": "student.dob",
                "options": {
                    "validator": {
                        "type": "date",
                        "message": "Please enter a valid date of birth"
                    }
                }
            }
        ]
    },
    {
        "id": "student-grade-required",
        "name": "Student Grade Required",
        "enabled": true,
        "priority": 60,
        "conditions": {
            "field": "student.grade",
            "operator": "isEmpty"
        },
        "actions": [
            {
                "type": "setRequired",
                "target": "student.grade",
                "value": true,
                "options": {
                    "message": "Grade is required"
                }
            }
        ]
    },
    {
        "id": "student-major-required",
        "name": "Student Major Required",
        "enabled": true,
        "priority": 50,
        "conditions": {
            "field": "student.major",
            "operator": "isEmpty"
        },
        "actions": [
            {
                "type": "setRequired",
                "target": "student.major",
                "value": true,
                "options": {
                    "message": "Major is required"
                }
            }
        ]
    },
    {
        "id": "student-address-required",
        "name": "Student Address Required",
        "enabled": true,
        "priority": 40,
        "conditions": {
            "field": "student.address",
            "operator": "isEmpty"
        },
        "actions": [
            {
                "type": "setRequired",
                "target": "student.address",
                "value": true,
                "options": {
                    "message": "Address is required"
                }
            }
        ]
    }
]
